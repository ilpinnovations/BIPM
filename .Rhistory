#inspect basket rules
rep_1_a <- inspect(sort(rule_txns_daily, by="lift")[1:10])
rep_1_b <- inspect(rule_txns_daily_elcat[1:10])
#Plotting lift vs support vs confidence
rep_1_c <- plot(rule_txns_daily[1:10], method = "grouped",
control=list(main = "Highest Lift Itemset - Grouped Plot"),
measure=c("support","lift"),
shading="confidence")
rep_1_d <- plot(rule_txns_daily_elcat[1:10],
control=list(main="Highest Frequenct Itemset - Bubble Plot"))
rep_1_e <- plot(rule_txns_daily_elcat[1:10], method="paracoord",
control=list(main="Highest Frequency Itemset - Parallel Coordinate Plot",reorder=TRUE))
## Extracting counts of order for top ten itemset per month
y1 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_4 from north_oltp
where order_month = 4 and product_id LIKE 'P2' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P17') group by order_week order by order_week")
y2 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_5 from north_oltp
where order_month = 4 and product_id LIKE 'P7' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P6') group by order_week order by order_week")
y3 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_6 from north_oltp
where order_month = 4 and product_id LIKE 'P11' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P16') group by order_week order by order_week")
y4 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_7 from north_oltp
where order_month = 4 and product_id LIKE 'P19' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P3') group by order_week order by order_week")
z1 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_4 from north_oltp
where order_month = 4 and product_id LIKE 'P2' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P17') group by order_week order by order_week")
z2 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_5 from north_oltp
where order_month = 4 and product_id LIKE 'P7' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P6') group by order_week order by order_week")
z3 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_6 from north_oltp
where order_month = 4 and product_id LIKE 'P11' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P16') group by order_week order by order_week")
z4 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_7 from north_oltp
where order_month = 4 and product_id LIKE 'P19' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P3') group by order_week order by order_week")
##creating month number through sequence
x <- matrix(seq(15,17,1))
##Creating Dataframes and convering them into matrix form from list
df1 <- data.frame(x,y1,y2,y3,y4)
df2 <- melt(df1, id.vars = "x")
df3 <- data.frame(x,z1,z2,z3,z4)
df4 <- melt(df3, id.vars = "x")
##creating plots using ggplot2
##plots of top 5 itemset based on number of order per month
y <- ggplot(data = df2, aes(x = x, y = value, colour = variable)) + geom_line()
# providing title to the plot
y <- y + labs(title = "Quantity of purchase on promo items: A comparison")
# providing axis names
y <- y + labs(x = "Weeks", y="Quantity of purchase")
#providing smoothness to curves
y <- y + stat_smooth(size = 1.5)
##similar plotting for other criteria
z <- ggplot(data = df4, aes(x = x, y = value, colour = variable)) + geom_line()
z <- z + labs(title = "Number of orders on promo items: A comparison")
z <- z + labs(x = "Weeks", y="Number of Order")
z <- z + stat_smooth(size = 1.5)
return(list(rep_1_a, rep_1_b, rep_1_c, rep_1_c, rep_1_e, y, z))
}
save.image("~/R Files/Reports/Reports/Environment.R.RData")
Sales_Basket_North()
#load dbms package
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel1 <- odbcConnect("Oracle", uid="system", pwd="011235")
##splitting data into categories to identify basket
dataset_daily <- sqlQuery(channel1,"select count(order_id)no_of_orders,customer_id
from north_oltp where PROMO_KEY='NA' group by
customer_id order by customer_id ")
#removing duplicate rows
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset_daily <- split(dataset_daily_unique$PRODUCT_NAME,
dataset_daily_unique$ORDER_DATE)
#creating transaction table
txns_daily <- as(split_dataset_daily,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.1,conf=0.9, minlen=5,
maxlen=5))
#inspect basket rules
inspect(rule_txns_daily[1:3])
Purchasing_pattern_C1 = function(a) {
#load dbms package
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel1 <- odbcConnect("Oracle", uid="system", pwd="011235")
##Extracting table from database into a vector
north_oltp <- sqlQuery(channel1,"select * from north_oltp")
#selecting specific column to find order behaviour
itemset_customer <- sqlQuery(channel1,"select CUSTOMER_ID, CUSTOMER_NAME, PRODUCT_ID, PRODUCT_NAME, ORDER_WEEK
from north_oltp group by  CUSTOMER_ID, CUSTOMER_NAME, PRODUCT_ID, PRODUCT_NAME,ORDER_WEEK
order by ORDER_WEEK")
##splitting data into categories to identify basket
dataset_daily <- sqlQuery(channel1,"select ORDER_DATE, PRODUCT_NAME
from north_oltp WHERE CUSTOMER_ID='C1' group by
PRODUCT_NAME,ORDER_DATE order by ORDER_DATE")
#removing duplicate rows
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset_daily <- split(dataset_daily_unique$PRODUCT_NAME,
dataset_daily_unique$ORDER_DATE)
#creating transaction table
txns_daily <- as(split_dataset_daily,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.1,conf=0.95, minlen=4,
maxlen=7))
#inspect basket rules
a <- inspect(rule_txns_daily)
#applying elcat
rule_txns_daily_elcat <- eclat(txns_daily,parameter=list(sup=0.1, minlen=4,
maxlen=7))
#plotting
b <- plot(rule_txns_daily_elcat, method="paracoord", control=list(reorder=TRUE))
return(list(a,b))
}
Purchasing_pattern_C1()
# Determining the top 'k' itemset comprising of 'n' elements
# Reporting Based on Transaction i.e. basket analysis for each transaction
## Creating a function that will generate entire data and reports
North_Transaction_Basket <- function()
{
#load dbms package
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
1
}
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel <- odbcConnect("Oracle", uid="system", pwd="011235")
##storing required column values from table into a matrix
library("arules", lib.loc="~/R/win-library/3.2")
# Determining the top 'k' itemset comprising of 'n' elements
# Reporting Based on Transaction i.e. basket analysis for each transaction
## Creating a function that will generate entire data and reports
North_Transaction_Basket <- function()
{
#load dbms package
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel <- odbcConnect("Oracle", uid="system", pwd="011235")
##storing required column values from table into a matrix
dataset_daily <- sqlQuery(channel1,"select ORDER_ID, PRODUCT_NAME from
north_oltp group by PRODUCT_NAME,ORDER_ID order
by ORDER_ID")
#removing duplicate rows
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset <- split(dataset_daily_unique$PRODUCT_NAME,
dataset_daily_unique$ORDER_ID)
#creating transaction table
txns_daily <- as(split_dataset,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.05,conf=0.9, minlen=3,
maxlen = 4))
rule_txns_daily_elcat <- eclat(txns_daily, parameter = list(support=0.05, minlen=3,
maxlen = 4))
#inspect basket rules
rep_1_a <- inspect(sort(rule_txns_daily, by="lift")[1:10])
rep_1_b <- inspect(rule_txns_daily_elcat[1:10])
#load arule vizualizaton package
library("arulesViz", lib.loc="C:/Program Files/R/R-3.2.0/library")
#Plotting lift vs support vs confidence
rep_1_c <- plot(rule_txns_daily[1:10], method = "grouped",
control=list(main = "Highest Lift Itemset - Grouped Plot"),
measure=c("support","lift"),
shading="confidence")
rep_1_d <- plot(rule_txns_daily_elcat[1:10],
control=list(main="Highest Frequenct Itemset - Bubble Plot"))
rep_1_e <- plot(rule_txns_daily_elcat[1:10], method="paracoord",
control=list(main="Highest Frequency Itemset - Parallel Coordinate Plot",reorder=TRUE))
rep_1_f <- plot(rule_txns_daily[1:10], method = "matrix",
control=list(main = "Highest Lift Itemset - Matrix Plot", type = "grid", reorder = TRUE),
measure=c("support","lift"),
shading="confidence")
}
North_Transaction()
North_Transaction_Basket()
channel <- odbcConnect("Oracle", uid="system", pwd="011235")
North_Transaction_Basket <- function()
{
#load dbms package
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel <- odbcConnect("Oracle", uid="system", pwd="011235")
##storing required column values from table into a matrix
dataset_daily <- sqlQuery(channel1,"select ORDER_ID, PRODUCT_NAME from
north_oltp group by PRODUCT_NAME,ORDER_ID order
by ORDER_ID")
#removing duplicate rows
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset <- split(dataset_daily_unique$PRODUCT_NAME,
dataset_daily_unique$ORDER_ID)
#creating transaction table
txns_daily <- as(split_dataset,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.05,conf=0.9, minlen=3,
maxlen = 4))
rule_txns_daily_elcat <- eclat(txns_daily, parameter = list(support=0.05, minlen=3,
maxlen = 4))
#inspect basket rules
rep_1_a <- inspect(sort(rule_txns_daily, by="lift")[1:10])
rep_1_b <- inspect(rule_txns_daily_elcat[1:10])
#load arule vizualizaton package
library("arulesViz", lib.loc="C:/Program Files/R/R-3.2.0/library")
#Plotting lift vs support vs confidence
rep_1_c <- plot(rule_txns_daily[1:10], method = "grouped",
control=list(main = "Highest Lift Itemset - Grouped Plot"),
measure=c("support","lift"),
shading="confidence")
rep_1_d <- plot(rule_txns_daily_elcat[1:10],
control=list(main="Highest Frequenct Itemset - Bubble Plot"))
rep_1_e <- plot(rule_txns_daily_elcat[1:10], method="paracoord",
control=list(main="Highest Frequency Itemset - Parallel Coordinate Plot",reorder=TRUE))
rep_1_f <- plot(rule_txns_daily[1:10], method = "matrix",
control=list(main = "Highest Lift Itemset - Matrix Plot", type = "grid", reorder = TRUE),
measure=c("support","lift"),
shading="confidence")
}
North_Transaction_Basket()
North_Transaction()
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel1 <- odbcConnect("Oracle", uid="system", pwd="011235")
##storing required column values from table into a matrix
dataset_daily <- sqlQuery(channel1,"select ORDER_ID, PRODUCT_NAME from
north_oltp group by PRODUCT_NAME,ORDER_ID order
by ORDER_ID")
View(dataset_daily)
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset <- split(dataset_daily_unique$PRODUCT_NAME,
dataset_daily_unique$ORDER_ID)
d
txns_daily <- as(split_dataset,"transactions")
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel1 <- odbcConnect("Oracle", uid="system", pwd="011235")
dataset_daily <- sqlQuery(channel1,"select ORDER_ID, PRODUCT_NAME from
north_oltp group by PRODUCT_NAME,ORDER_ID order
by ORDER_ID")
View(dataset_daily)
#removing duplicate rows
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset <- split(dataset_daily_unique$PRODUCT_NAME,
txns_daily <- as(split_dataset,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.05,conf=0.9, minlen=3,
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.05,conf=0.9, minlen=3,
maxlen = 4))
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset <- split(dataset_daily_unique$PRODUCT_NAME,
dataset_daily_unique$ORDER_ID)
#creating transaction table
txns_daily <- as(split_dataset,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.05,conf=0.9, minlen=3,
maxlen = 4))
inspect(rule_txns_daily)
inspect(rule_txns_daily[1:10])
rule_txns_daily_elcat <- eclat(txns_daily, parameter = list(support=0.05, minlen=3,
maxlen = 4))
#inspect basket rules
rep_1_a <- inspect(sort(rule_txns_daily, by="lift")[1:10])
rep_1_b <- inspect(rule_txns_daily_elcat[1:10])
library("arulesViz", lib.loc="C:/Program Files/R/R-3.2.0/library")
#Plotting lift vs support vs confidence
rep_1_c <- plot(rule_txns_daily[1:10], method = "grouped",
control=list(main = "Highest Lift Itemset - Grouped Plot"),
measure=c("support","lift"),
shading="confidence")
rep_1_e <- plot(rule_txns_daily_elcat[1:10], method="paracoord",
control=list(main="Highest Frequency Itemset - Parallel Coordinate Plot",reorder=TRUE))
rep_1_b <- inspect(rule_txns_daily_elcat[1:10])
# Determining the top 'k' itemset comprising of 'n' elements
# Reporting Based on Transaction i.e. basket analysis for each transaction
## Creating a function that will generate entire data and reports
North_Transaction_Basket <- function()
{
#load dbms package
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
#Connecting to database
channel1 <- odbcConnect("Oracle", uid="system", pwd="011235")
##storing required column values from table into a matrix
dataset_daily <- sqlQuery(channel1,"select ORDER_ID, PRODUCT_NAME from
north_oltp group by PRODUCT_NAME,ORDER_ID order
by ORDER_ID")
#removing duplicate rows
dataset_daily_unique <- dataset_daily[!duplicated(dataset_daily), ]
#splitting dataframe into transaction and itemset
split_dataset <- split(dataset_daily_unique$PRODUCT_NAME,
dataset_daily_unique$ORDER_ID)
#creating transaction table
txns_daily <- as(split_dataset,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.05,conf=0.9, minlen=3,
maxlen = 4))
rule_txns_daily_elcat <- eclat(txns_daily, parameter = list(support=0.05, minlen=3,
maxlen = 4))
#inspect basket rules
rep_1_a <- inspect(sort(rule_txns_daily, by="lift")[1:10])
rep_1_b <- inspect(rule_txns_daily_elcat[1:10])
#load arule vizualizaton package
library("arulesViz", lib.loc="C:/Program Files/R/R-3.2.0/library")
#Plotting lift vs support vs confidence
rep_1_c <- plot(rule_txns_daily[1:10], method = "grouped",
control=list(main = "Highest Lift Itemset - Grouped Plot"),
measure=c("support","lift"),
shading="confidence")
rep_1_d <- plot(rule_txns_daily_elcat[1:10],
control=list(main="Highest Frequenct Itemset - Bubble Plot"))
rep_1_e <- plot(rule_txns_daily_elcat[1:10], method="paracoord",
control=list(main="Highest Frequency Itemset - Parallel Coordinate Plot",reorder=TRUE))
rep_1_f <- plot(rule_txns_daily[1:10], method = "matrix",
control=list(main = "Highest Lift Itemset - Matrix Plot", type = "grid", reorder = TRUE),
measure=c("support","lift"),
shading="confidence")
}
North_Transaction()
North_Transaction_Basket()
North_Customer()
library(arulesViz)
# loading RODM and RODBC package
library(RODM)
library(RODBC)
#creating a function for rowmatch
rowmatch <- function(A,B)
{
# Rows in A that match the rows in B
f <- function(...) paste(..., sep=":")
if(!is.matrix(B)) B <- matrix(B, 1, length(B))
a <- do.call("f", as.data.frame(A))
b <- do.call("f", as.data.frame(B))
match(b, a)
}
# Create a connection to the database called "channel"
channel <- odbcConnect("ORACLE", uid="SYSTEM", pwd="011235")
Customer_id <- sqlQuery(channel, "SELECT DISTINCT(CUSTOMER_ID) FROM NORTH_OLTP
ORDER BY CUSTOMER_ID")
View(Customer_id)
m <- data.frame(Customer_id)
View(m)
x <- readline("Enter Customer_id(From C1 to C35) or press esc to cancel  :")
#load dbms package
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
library("arulesViz", lib.loc="~/R/win-library/3.2")
#loading rattle and other graphical packages
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.0/library")
library("reshape", lib.loc="C:/Program Files/R/R-3.2.0/library")
library("rattle", lib.loc="C:/Program Files/R/R-3.2.0/library")
#Connecting to database
channel1 <- odbcConnect("Oracle", uid="system", pwd="011235")
sales_week <- sqlQuery(channel1,"select ORDER_ID, PRODUCT_NAME from
north_oltp where order_week = 16 group by PRODUCT_NAME,ORDER_ID order
by ORDER_ID")
View(sales_week)
sales_week_unique <- sales_week[!duplicated(sales_week), ]
split_sales_weekly <- split(sales_week_unique$PRODUCT_NAME,
sales_week_unique$ORDER_ID)
#creating transaction table
txns_daily <- as(split_sales_weekly,"transactions")
#applying apriori
rule_txns_daily <- apriori(txns_daily,parameter=list(sup=0.05,conf=0.9, minlen=3,
maxlen = 4))
rule_txns_daily_elcat <- eclat(txns_daily, parameter = list(support=0.05, minlen=3,
maxlen = 4))
#inspect basket rules
rep_1_a <- inspect(sort(rule_txns_daily, by="lift")[1:10])
rep_1_b <- inspect(rule_txns_daily_elcat[1:10])
rep_1_c <- plot(rule_txns_daily[1:10], method = "grouped",
control=list(main = "Highest Lift Itemset - Grouped Plot"),
measure=c("support","lift"),
shading="confidence")
rep_1_d <- plot(rule_txns_daily_elcat[1:10],
control=list(main="Highest Frequenct Itemset - Bubble Plot"))
rep_1_e <- plot(rule_txns_daily_elcat[1:10], method="paracoord",
control=list(main="Highest Frequency Itemset - Parallel Coordinate Plot",reorder=TRUE))
## Extracting counts of order for top ten itemset per month
y1 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_4 from north_oltp
x <- seq(15,17,1)
x
x <- matrix(seq(15,17,1))
x
df1 <- data.frame(x,y1,y2,y3,y4)
y1 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_4 from north_oltp
where order_month = 4 and product_id LIKE 'P2' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P17') group by order_week order by order_week")
y1 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_4 from north_oltp
where order_month = 4 and product_id LIKE 'P2' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P17') group by order_week order by order_week")
y2 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_5 from north_oltp
where order_month = 4 and product_id LIKE 'P7' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P6') group by order_week order by order_week")
y3 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_6 from north_oltp
where order_month = 4 and product_id LIKE 'P11' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P16') group by order_week order by order_week")
y4 <- sqlQuery(channel1,"select sum(quantity) Aprilbonanza_Promo_7 from north_oltp
where order_month = 4 and product_id LIKE 'P19' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P3') group by order_week order by order_week")
z1 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_4 from north_oltp
where order_month = 4 and product_id LIKE 'P2' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P17') group by order_week order by order_week")
z2 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_5 from north_oltp
where order_month = 4 and product_id LIKE 'P7' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P6') group by order_week order by order_week")
z3 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_6 from north_oltp
where order_month = 4 and product_id LIKE 'P11' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P16') group by order_week order by order_week")
z4 <- sqlQuery(channel1,"select count(customer_id) Aprilbonanza_Promo_7 from north_oltp
where order_month = 4 and product_id LIKE 'P19' and order_id
in(select order_id from north_oltp where product_id
LIKE 'P3') group by order_week order by order_week")
##creating month number through sequence
x <- matrix(seq(15,17,1))
##Creating Dataframes and convering them into matrix form from list
df1 <- data.frame(x,y1,y2,y3,y4)
df2 <- melt(df1, id.vars = "x")
df3 <- data.frame(x,z1,z2,z3,z4)
df4 <- melt(df3, id.vars = "x")
##creating plots using ggplot2
##plots of top 5 itemset based on number of order per month
y <- ggplot(data = df2, aes(x = x, y = value, colour = variable)) + geom_line()
# providing title to the plot
y <- y + labs(title = "Quantity of purchase on promo items: A comparison")
# providing axis names
y <- y + labs(x = "Weeks", y="Quantity of purchase")
#providing smoothness to curves
y <- y + stat_smooth(size = 1.5)
##similar plotting for other criteria
z <- ggplot(data = df4, aes(x = x, y = value, colour = variable)) + geom_line()
z <- z + labs(title = "Number of orders on promo items: A comparison")
z <- z + labs(x = "Weeks", y="Number of Order")
z <- z + stat_smooth(size = 1.5)
return(list(rep_1_a, rep_1_b, rep_1_c, rep_1_c, rep_1_e, y, z))
}
x
df1
y <- ggplot(data = df2, aes(x = x, y = value, colour = variable)) + geom_line()
y
y <- y + labs(title = "Quantity of purchase on promo items: A comparison")
# providing axis names
y <- y + labs(x = "Weeks", y="Quantity of purchase")
#providing smoothness to curves
y <- y + stat_smooth(size = 1.5)
y
Product_Behaviour_North()
library("rattle", lib.loc="C:/Program Files/R/R-3.2.0/library")
rattle()
library("RODBC", lib.loc="~/R/win-library/3.2")
library("RODM", lib.loc="~/R/win-library/3.2")
#load arule package
library("arules", lib.loc="~/R/win-library/3.2")
library("arulesViz", lib.loc="~/R/win-library/3.2")
#loading rattle and other graphical packages
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.0/library")
library("reshape", lib.loc="C:/Program Files/R/R-3.2.0/library")
library("rattle", lib.loc="C:/Program Files/R/R-3.2.0/library")
#Connecting to database
channel1 <- odbcConnect("Oracle", uid="system", pwd="011235")
##storing required column values from table into a matrix
sales_week <- sqlQuery(channel1,"select ORDER_ID, PRODUCT_NAME from
north_oltp where order_week = 16 group by PRODUCT_NAME,ORDER_ID order
by ORDER_ID")
